{"version":3,"sources":["Components/Dialogs/Dialogs.module.css","Components/hoc/withAuthRedirect.js","Components/Dialogs/DialogItem/DialogItem.jsx","Components/Dialogs/Message/Message.jsx","Components/Dialogs/Dialogs.jsx","Components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","DialogItem","path","id","className","s","dialog","active","activeClassName","name","Message","message","maxLength","maxLengthCreator","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","dialogsItems","values","sendMessage","newMessageBody","compose","dispatch","sendMessageActionCreator"],"mappings":"iGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,qJCI/MC,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAACC,GAAe,IAEtCC,EAFqC,uKAInC,OAAKC,KAAKC,MAAMN,OACb,cAACG,EAAD,eAAeE,KAAKC,QADQ,cAAC,IAAD,CAAUC,GAAI,eAJV,GAEXC,IAAML,WAQtC,OAFmCM,YAAQX,EAARW,CAAoCL,K,qGCC5DM,EAVI,SAACJ,GAChB,IAAIK,EAAO,YAAcL,EAAMM,GAE/B,OACC,qBAAKC,UAAS,UAAKC,IAAEC,OAAP,YAAiBD,IAAEE,QAAjC,SACG,cAAC,IAAD,CAASC,gBAAiBH,IAAEE,OAAQT,GAAII,EAAxC,SAA+CL,EAAMY,UCI9CC,EARC,SAACb,GAEb,OAAO,sBAAKO,UAAWC,IAAEM,QAAlB,UAA4Bd,EAAMc,QAAlC,Q,kCCFLC,EAAYC,YAAiB,KA6CpBC,EA3CC,SAACjB,GAEf,IAAIP,EAAQO,EAAMkB,YAEZC,EAAkB1B,EAAM2B,QAAQC,KAAK,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAuBV,KAAMU,EAAEV,KAAMN,GAAIgB,EAAEhB,IAA1BgB,EAAEhB,OAC7DiB,EAAmB9B,EAAM+B,SAASH,KAAK,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAoBX,QAASW,EAAEX,SAAjBW,EAAEnB,OAkB1DoB,EAAsBC,YAAU,CAAEC,KAAM,wBAAlBD,EAbL,SAAC3B,GACtB,OACE,uBAAM6B,SAAU7B,EAAM8B,aAAtB,UACA,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUrB,KAAK,iBAAiBsB,SAAU,CAACC,IAAUpB,GAAYqB,YAAa,sBAChG,8BAAK,kDAWT,OACE,sBAAK7B,UAAWC,IAAEY,QAAlB,UACI,qBAAKb,UAAWC,IAAE6B,aAAlB,SACAlB,IAGA,sBAAKZ,UAAWC,IAAEgB,SAAlB,UACGD,EACD,8BACE,cAACG,EAAD,CAAqBG,SAfZ,SAACS,GAClBtC,EAAMuC,YAAYD,EAAOE,4B,gBCKhBC,sBACXtC,aAfkB,SAACV,GACnB,MAAO,CACRyB,YAAazB,EAAMyB,gBAGG,SAACwB,GACtB,MAAO,CACXH,YAAa,SAACC,GACVE,EAASC,YAAyBH,SAQlC5C,IAFW6C,CAIdxB","file":"static/js/4.a951f3cf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1rZ3k\",\"dialogsItems\":\"Dialogs_dialogsItems__2cvy3\",\"dialog\":\"Dialogs_dialog__3uLyt\",\"active\":\"Dialogs_active__2jYYF\",\"messages\":\"Dialogs_messages__285JR\",\"message\":\"Dialogs_message__2QPe0\"};","import React from 'react';\nimport {Redirect} from 'react-router-dom';\nimport {connect} from 'react-redux';\n\n\nlet mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth,\n})\n\nexport const withAuthRedirect = (Component) => {\n\n    class RedirectComponent extends React.Component{\n        render() {\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>\n        return <Component {...this.props}/>\n        }\n    }\n    let ConnectAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\n    \n    return ConnectAuthRedirectComponent;\n}","\nimport React from 'react';\nimport s from './../Dialogs.module.css';\nimport {NavLink} from 'react-router-dom';\n\n\n\n\nconst DialogItem = (props) => {\n    let path = \"/dialogs/\" + props.id;\n\n    return(\n     <div className={`${s.dialog} ${s.active}`}>\n        <NavLink activeClassName={s.active} to={path}>{props.name}</NavLink> \n     </div>\n    )\n};\n\nexport default DialogItem;","import React from 'react';\nimport s from './../Dialogs.module.css';\n\n\n\n\n\n\n\nconst Message = (props) => {\n\n    return <div className={s.message}>{props.message} </div>\n\n\n};\n\n\nexport default Message;","import React from 'react';\nimport s from './Dialogs.module.css';\nimport DialogItem from './DialogItem/DialogItem';\nimport Message from './Message/Message';\nimport {Field, reduxForm} from 'redux-form';\nimport {Textarea} from '../common/FormControls/FormsControls';\nimport {required, maxLengthCreator} from '../../Utils/Validators/validator';\n\n\nconst maxLength = maxLengthCreator(100);\n\nconst Dialogs = (props) => {\n  \n  let state = props.dialogsPage;\n\n    let dialogsElements = state.dialogs.map( d => <DialogItem key={d.id} name={d.name} id={d.id} />) \n    let messagesElements = state.messages.map( m => <Message key={m.id} message={m.message}/> )\n   \n\n\n  \n    const AddMessageForm = (props) => {\n      return (\n        <form onSubmit={props.handleSubmit}>\n        <Field component={Textarea} name=\"newMessageBody\" validate={[required, maxLength]} placeholder={\"Type your message\"}/> \n        <div><button>send</button></div> \n        </form>\n      )\n    }\n\n    let addNewMessage =(values) => {\n      props.sendMessage(values.newMessageBody)\n    }\n\n    const AddMessageReduxForm = reduxForm({ form: 'dialogAddMessageForm'})(AddMessageForm);\n\n    return (\n      <div className={s.dialogs}>\n          <div className={s.dialogsItems}>\n         {dialogsElements}\n          </div>\n\n          <div className={s.messages}>\n            {messagesElements}\n            <div>\n              <AddMessageReduxForm onSubmit={addNewMessage}/>\n            </div>\n          </div>\n      </div>\n    )\n};\n\n\n\nexport default Dialogs;","import { connect } from 'react-redux';\nimport {sendMessageActionCreator} from '../redux/dialogsReducer';\nimport Dialogs from './Dialogs';\nimport {withAuthRedirect} from '../hoc/withAuthRedirect';\nimport {compose} from 'redux';\n\n\n// const DialogsContainer = (props) => {\n//     let state = props.store.getState().dialogsPage;\n\n\n//     let updateNewMessage=(body)=> {\n//       props.store.dispatch(updateNewMessageBodyActionCreator(body));\n//     }\n//     let sendMessage =()=> {\n//       props.store.dispatch(sendMessageActionCreator());\n//     };\n\n//     return <Dialogs dialogsPage={state} updateNewMessage={updateNewMessage} sendMessage={sendMessage} />\n// };\n\n\nlet mapStateToProps = (state) => {\n    return {\n   dialogsPage: state.dialogsPage,\n    }\n}\nlet mapDispatchToProps = (dispatch) => {\n    return {\nsendMessage: (newMessageBody)=> {\n    dispatch(sendMessageActionCreator(newMessageBody));\n}\n    }\n}\n\n\nexport default compose(\n    connect(mapStateToProps,mapDispatchToProps ),\n    withAuthRedirect\n)\n(Dialogs);"],"sourceRoot":""}